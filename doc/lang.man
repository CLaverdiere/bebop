.TH Bebop 7 "February 2015" "CMSC 431" "User Manuals"
.SH NAME
.PP
Bebop \- A classy language created for a compilers class.
.SH DESCRIPTION
.PP
Bebop resembles a mix of Python and Ruby.
Bebop is compiled to the x86_64 assembly language with the
\f[B]bebop\f[] compiler, from which an executable program can be
assembled and linked using \f[B]nasm(1)\f[] and \f[B]gcc(1)\f[]
respectively.
.PP
This manual is ordered roughly by usefulness.
There\[aq]s an examples section at the end if you just feel like
skipping to that.
.SH LANGUAGE
.SS Language Grammar
.PP
The following statements are supported.
Statements can have multiple newlines between them.
.TP
.B type variable
Declare variable as the given type.
.RS
.RE
.TP
.B variable = expression
Assign the value of expression to variable.
Variables must be declared before assigned.
.RS
.RE
.TP
.B say expression
Print the value of an expression with a newline.
Non\-newline version \f[B]write\f[] also available.
.RS
.RE
.SS Type System
.PP
Bebop supports types for integers, floating point numbers, booleans, and
strings.
There is also a \f[B]none\f[] type, similar to \[aq]void\[aq] in other
languages.
This keyword is reserved for function return types.
.TP
.B Keywords:
\f[B]bool, float, int, none, string\f[]
.RS
.RE
.PP
Note that the \f[I]string\f[] type is heavily restricted, and can only
be passed to / returned from functions, and printed out.
All other operations using strings are undefined.
.PP
Bebop only supports static typing.
Currently, there is no support for type promotion, and Bebop will laugh
at you for mismatching types.
.SS Boolean expressions and relations
.PP
Boolean variables can be assigned expressions of \f[B]true\f[] or
\f[B]false.\f[] Internally, these are represented as 1s and 0s, and will
be printed out as such.
.PP
Boolean expressions can currently compare integers and floats.
.TP
.B Boolean Comparison:
\f[B]value \f[C]<operator>\f[] value\f[]
.RS
.RE
.TP
.B Supported operators:
\f[B]==, !=, <, <=, >, >=\f[]
.RS
.RE
.PP
To combine boolean relations, logical operators \f[B]not, and,\f[] and
\f[B]or\f[] may be used, in order of highest to lowest precedence.
.SS Program Control
.PP
Both if and while control structures are supported.
Each control block must be closed with a \f[B]fin\f[] keyword.
.PP
\f[B]If statements:\f[]
.IP
.nf
\f[C]
if\ boolean_expression
\ \ statements
fin
\f[]
.fi
.PP
\f[B]While loops:\f[]
.IP
.nf
\f[C]
while\ boolean_expression
\ \ statements
fin
\f[]
.fi
.PP
While loops may contain \f[B]next\f[] and \f[B]leave\f[] statements,
analogous to \f[B]continue\f[] and \f[B]break\f[] in other languages.
.SS Arrays
.PP
Bebop supports basic arrays with bounds checking:
.TP
.B Array declaration:
type array_name[size]
.RS
.RE
.PP
Arrays cannot be declared with a variable size, but when referencing the
array, the index may be any valid integer expression.
.TP
.B Array assignment:
array_name[int_expr] = expr
.RS
.RE
.PP
Arrays cannot be of type string.
.SS User defined types (structs)
.PP
Bebop supports custom types with primitive members (int, float, bool).
.PP
Type declaration (note: \f[B]type\f[] is literally the word
\f[I]"type"\f[].):
.IP
.nf
\f[C]
type\ name
\ \ primitive\ declarations
fin
\f[]
.fi
.PP
Instances of types must be declared like all other variables.
.PP
Declare instance (note: \f[B]type\f[] is \f[B]not\f[] literally the word
\f[I]"type"\f[].):
.IP
.nf
\f[C]
type\ instance_name
\f[]
.fi
.PP
Types can have their members used in expressions and passed to
functions.
Currently, types cannot be passed / returned directly from functions.
.TP
.B Member access:
instance.member
.RS
.RE
.SS Functions
.PP
Bebop currently supports functions with return values.
.PP
\f[B]Function declaration:\f[]
.IP
.nf
\f[C]
type\ function_name(type1\ arg1,\ ...,\ typeN\ argN)
\ \ declarations
\ \ statements
\ \ return\ expr
fin
\f[]
.fi
.PP
Functions may be declared type \f[B]none\f[] when they don\[aq]t return
any value.
.PP
All local variables \f[B]must\f[] be declared at the top of the
function.
.PP
Note that \f[B]return\f[] can be placed anywhere in the function body,
to break out of the function.
.PP
Functions are called the way one would expect:
.TP
.B \f[B]Function call:\f[]
function_name(arg1, ..., argN)
.RS
.RE
.PP
The \f[B]number\f[] and \f[B]type\f[] of arguments are checked when the
function is called.
.PP
Functions may be \f[B]recursively\f[] called.
.SS Scoping
.PP
Bebop supports both \f[B]local\f[] and \f[B]global\f[] variables.
All variables declared outside of a function are global, and support
lexical scoping rules.
.PP
Variables declared inside a function are local, and can use the same
name as a global variable without conflict.
Lexical scoping is currently \f[B]not\f[] supported for local variables.
.SS Printing Output
.PP
To print the value of an expression, use \f[B]say expression.\f[] The
variant \f[B]write\f[] excludes the newline from printing.
.SS User Input
.PP
The keywords \f[B]inp_int\f[] and \f[B]inp_float\f[] are reserved for
user input.
When encountered, the compiler calls scanf internally and captures input
as the resulting expression.
.SS Comments
.PP
the \[aq]<>\[aq] symbol starts a comment, and discards the rest of the
line.
Comments can be placed anywhere in the line, but do not span multiple
lines.
.SS Mathematical Operations
.PP
The following mathematical operations are supported in decreasing order
of precedence.
Expressions may be constructed from signed 64 bit integers, or other
mathematical expressions.
.TP
.B \f[B](expression)\f[]
Parentheses.
Override precedence of operators outside the parentheses.
.RS
.RE
.TP
.B \f[B]expression \f[C]**\f[] expression\f[]
Integer exponentiation.
Returns 1 if exponent is less than 1.
.RS
.RE
.TP
.B \f[B]\-expression\f[]
Negation.
.RS
.RE
.TP
.B \f[B]expression * expression\f[]
Multiplication.
Same precedence as division and modulus.
.RS
.RE
.TP
.B \f[B]expression / expression\f[]
Division.
Same precedence as multiplication and modulus.
.RS
.RE
.TP
.B \f[B]expression % expression\f[]
Modulus.
Same precedence as multiplication and division.
.RS
.RE
.TP
.B \f[B]expression + expression\f[]
Addition.
Same precedence as subtraction.
.RS
.RE
.TP
.B \f[B]expression \- expression\f[]
Subtraction.
Same precedence as addition.
.RS
.RE
.SS Reserved Keywords
.PP
Several keywords are used by the compiler and must not be used as
variables.
It\[aq]s probably a safe bet to stay away from any variable 3 letters or
shorter, though necessary ones like \f[I]i\f[] are fine.
.TP
.B Reserved keywords:
all type keywords, input keywords, main, fmt, [cfs]{number}, intpow
.RS
.RE
.SH EXAMPLES
.SS Simple assignment / arithmetic:
.IP
.nf
\f[C]
int\ spike
int\ faye

spike\ =\ 7
faye\ =\ 4

<>\ This\ is\ a\ comment.
say\ spike\ +\ faye
\f[]
.fi
.SS User input:
.IP
.nf
\f[C]
float\ ein
float\ ed

ein\ =\ inp_float\ +\ 7.0
ed\ =\ ein\ *\ inp_float\ **\ inp_float\ /\ 4.0

say\ ein\ \-\ ed
\f[]
.fi
.SS Conditionals:
.IP
.nf
\f[C]
int\ jet
bool\ flag

jet\ =\ 5
flag\ =\ true

if\ (jet\ !=\ 5)\ and\ flag
\ \ say\ "jet\ is\ not\ 5."
fin
\f[]
.fi
.SS Functions:
.IP
.nf
\f[C]
int\ countdown(int\ n)
\ \ say\ n

\ \ if\ n\ ==\ 0
\ \ \ \ return\ n
\ \ fin

\ \ return\ countdown(n\ \-\ 1)
fin

say\ "Counting\ down!"
fun(20)
\f[]
.fi
.SS Lexical Scoping
.IP
.nf
\f[C]
int\ var
var\ =\ 1

if\ var\ >\ 0
\ \ float\ var
\ \ var\ =\ 2.22

\ \ if\ var\ !=\ 2.22\ \ <>\ You\ can\ (not)\ advance
\ \ \ \ int\ var
\ \ \ \ var\ =\ 3
\ \ \ \ say\ var
\ \ fin
fin
\f[]
.fi
.SS Arrays
.IP
.nf
\f[C]
int\ lotto_nums[7]

lotto_nums[0]\ =\ 4
lotto_nums[1]\ =\ 8
\&...
lotto_nums[6]\ =\ 7

say\ lotto_nums[7]\ <>\ Out\ of\ bounds\ error.
\f[]
.fi
.SS User defined types
.IP
.nf
\f[C]
type\ car
\ \ int\ num_homies
\ \ float\ cost
\ \ bool\ chick_magnet
fin

car\ my_car

my_car.num_homies\ =\ 1
my_car.cost\ =\ 1250.00
my_car.chick_magnet\ =\ false
\f[]
.fi
.SH LIMITATIONS
.IP \[bu] 2
A \f[B]newline\f[] is required after each program statement.
No brackets for you.
.IP \[bu] 2
Variables may not be named as reserved keywords.
.IP \[bu] 2
While booleans are represented as 1s and 0s, they cannot be mixed with
integers.
.SH AUTHOR
.PP
Chris Laverdiere <chlaver1@umbc.edu>
